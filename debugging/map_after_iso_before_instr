var Message = new Class({
 Implements: [Events, Options],
 container: null,
 action: null,
 position: "top",
 initialize: function (a, c, e, b) {
  "iso_228d6534-ef50-42d9-bd7d-cff1f1f09445_iso";
  this.setOptions(b);
  this.position = a;
  this.container = $("message-element").clone();
  this.container.addClass(a);
  var d = this.container.getElement(".content");
  d.addClass(c);
  if ("string" == typeof e) {
   e = new Element("div").set("html", e);
  }
  e.inject(d);
  this._addEvents();
  this.container.inject(document.body);
  if (this.container.hasClass("fullscreen")) {
   d.setStyle("margin-top", Math.max(10, document.body.getSize().y / 2 - d.getSize()
    .y / 2 - 50) + "px");
   if (d.getSize().y > document.body.getSize().y - 100 && e.getElement(
     ".page-content")) {
    e.getElement(".page-content").setStyles({
     overflow: "auto",
     height: Math.max(10, document.body.getSize().y - 100) + "px"
    });
   }
  }
  if ("top" == a) {
   this.action = new Fx.Slide(d, {
    hideOverflow: false
   });
   this.action.hide();
   this.action.slideIn();
  } else {
   this.action = new Fx.Tween(this.container, {
    property: "opacity"
   });
   this.action.set(0);
   this.action.start(1);
  }
  if (this.options.autoHide) {
   this.close.delay(this.options.autoHide, this);
  }
  if (this.options.noCloseButton) {
   this.container.addClass("no-default-close-button");
  }
 },
 _addEvents: function () {
  "iso_dc942600-ec99-425f-a862-069701e81fbe_iso";
  this.container.getElements(".close").addEvent("click", this.close.bind(
   this));
  this.container.getElements(".action").addEvent("click", function () {
   "iso_a33fc4d2-65d7-4b77-b7a8-8cbd10e67a13_iso";
   this.fireEvent("action", this.container);
  }.bind(this));
  this.container.getElements(".action-enter").addEvent("keyup", function (a) {
   "iso_3cd64293-ef49-410a-b336-a85923915a88_iso";
   if ("enter" == a.key) {
    this.fireEvent("action", this.container);
   }
  }.bind(this));
  this.container.getElements(".action-click").addEvent("click", function (a) {
   "iso_8b6eef8b-1b8a-4ad1-a4c3-9835eef29564_iso";
   this.fireEvent("action", [this.container, a.target]);
  }.bind(this));
  this.container.getElements(".action-facebook").addEvent("click", function (
   a) {
   "iso_e22da1b6-0cf5-469e-823a-7241a38c0fff_iso";
   this.fireEvent("social", "facebook");
  }.bind(this));
 },
 close: function () {
  "iso_c0c52b3c-6277-497f-b888-02044d7e4e42_iso";
  var a;
  if ("top" == this.position) {
   a = this.action.slideOut();
  } else {
   a = this.action.start(1, 0);
  }
  a.chain(function () {
   "iso_05f036e4-0eb6-4098-87ce-c0e637605bd1_iso";
   this.container.destroy();
  }.bind(this));
  this.fireEvent("closed");
 }
});
var LocationSearch = new Class({
 g: null,
 image: {
  creeps: "images/markers.png",
  towers: "images/markers.png",
  home: "images/markers.png",
  routeend: "images/markers.png"
 },
 initialize: function (a) {
  "iso_b622be5e-398c-4909-a91d-bb1f5b551e5a_iso";
  this.g = a;
 },
 search: function (a) {
  "iso_7008e5f1-40fa-4f15-ad26-b6dbdfd94bd3_iso";
  switch (a.toLowerCase()) {
  case "blubolt":
  case "blu bolt":
  case "bluebolt":
  case "blue bolt":
   this.image.home = this.image.towers = "images/markers/blubolt.png";
   return new google.maps.LatLng(51.38355, -2.363772);
  case "riot":
  case "riothq":
  case "riot hq":
  case "theriothq":
   this.image.home = this.image.towers = "images/markers/riot.png";
   return new google.maps.LatLng(51.383366, -2.36249);
  case "buckingham palace":
   this.image.home = "images/markers/buckingham-palace.png";
   return new google.maps.LatLng(51.501994, -.139952);
  case "the white house":
   this.image.home = "images/markers/white-house.png";
   return new google.maps.LatLng(38.897702, -77.036522);
  case "the vatican":
   this.image.home = "images/markers/vatican.png";
   return new google.maps.LatLng(41.9022573, 12.4581314);
  case "tower of london":
   return new google.maps.LatLng(51.509116, -.076947);
  case "bath abbey":
   return new google.maps.LatLng(51.381416, -2.358924);
  case "taj mahal":
   return new google.maps.LatLng(27.173024, 78.042101);
  case "giza":
   return new google.maps.LatLng(29.976111, 31.132778);
  case "eiffel tower":
   return new google.maps.LatLng(48.85819, 2.294585);
  case "hagia sophia":
   return new google.maps.LatLng(41.008611, 28.98);
  case "stonehenge":
   return new google.maps.LatLng(51.17889, -1.825278);
  case "jerusalem":
   return new google.maps.LatLng(31.767784, 35.213845);
  case "ibrox":
  case "ibrox stadium":
  case "rangers fc":
   this.image.home = "images/markers/ibrox.png";
   return new google.maps.LatLng(55.853206, -4.309256);
  case "cats":
  case "kittens":
  case "trolls":
  case "cat":
  case "kitten":
  case "troll":
   this.image.towers = "images/markers/cats.png";
   return new google.maps.LatLng(51.381416, -2.358924);
  case "cheezburger":
  case "cheez burger":
  case "failblog":
  case "fail blog":
   this.image.towers = "images/markers/cats.png";
   this.image.home = "images/markers/cheezburger.png";
   return new google.maps.LatLng(47.62104, -122.35935);
  case "olympic stadium":
  case "olympic stadium london":
  case "olympic stadium, london":
   this.image.towers = "images/markers/olympics.png";
   this.image.home = "images/markers/olympics.png";
   return new google.maps.LatLng(51.5386, -.01645);
  }
  return false;
 },
 setLocation: function (a, b) {
  "iso_d6590a23-5468-4926-b69f-b99ebc786e5b_iso";
  this.g.ui.updateTowerImages();
 }
});
var Game = new Class({
 container: null,
 ui: null,
 stronghold: null,
 routes: [],
 towers: [],
 map: null,
 timer: null,
 lives: 0,
 money: 0,
 currentRound: -1,
 moneyRounds: 0,
 rounds: null,
 foundRoutes: null,
 hasWon: false,
 search: null,
 difficultyMultiplier: 1,
 initialize: function (a) {
  "iso_0c88bb77-9b23-4db8-ab69-def7fb3250a3_iso";
  this.timer = new Timer().pause();
  this.container = $(a);
  this.initMap();
  this.search = new LocationSearch(this);
  this.ui = new GameInterface(this, this.container);
  this.updateCopyrights();
  this.ui.startGame(function (d, c, b) {
   "iso_8546aa0e-2693-44a4-8707-f5f94660f36b_iso";
   this.search.setLocation(c, d);
   this.stronghold = d;
   this.foundRoutes = b;
   this.showStronghold();
   this.rounds = new Rounds(b);
   this.nextRound();
   _gaq.push(["_trackEvent", "game", "play", d.lat() + "," + d.lng()]);
  }.bind(this));
 },
 nextRound: function () {
  "iso_ee9da273-5f9b-4fed-833b-d0b45b7f0521_iso";
  var a = this.rounds.get(++this.currentRound);
  if (!a) {
   this.win();
   return;
  }
  a.g = this;
  a.addEvent("roundOver", this.nextRound.bind(this));
  if ("normal" == a.type) {
   if (this.moneyRounds++ && !this.hasWon) {
    this.addMoney(4 * this.moneyRounds + 50);
   }
   this.routes.each(function (c) {
    "iso_44064874-7a3f-4177-9742-562ef1d69254_iso";
    c.creeps = [];
   });
   this.ui.nextRound();
   this.ui.fastForwardOff();
   this.timer.pause();
  }
  if (54 == this.currentRound) {
   this.win();
  }
  var b = this.currentRound - 54;
  if (b > 0 && b % 5 == 0) {
   this.difficultyMultiplier += .2;
  }
  a.run();
 },
 geocode: function (b, e, c) {
  "iso_eb59cc83-73e9-40ac-a0a3-6c7a10da079e_iso";
  var a = this.search.search(b);
  if (a) {
   return e(a, b);
  }
  var d = new google.maps.Geocoder();
  d.geocode({
   address: b
  }, function (g, f) {
   "iso_84a14468-638d-44c7-a749-c70771d7abe1_iso";
   if (f == google.maps.GeocoderStatus.OK) {
    e(g[0].geometry.location, b);
   } else {
    c();
   }
  });
 },
 addRoute: function (a) {
  "iso_4abed395-557d-4071-a143-35ba57f3a564_iso";
  this.routes.push(a);
  this.towers.each(function (c) {
   "iso_43ee922b-164b-43d1-86bb-7bfc31cc21d2_iso";
   c.calculateRouteOverlap();
   c.removePathEvents();
   c.addPathEvents();
  });
  a.enable();
  if (a.addMessage) {
   new Message(a.addMessage[0], a.addMessage[1], a.addMessage[2], a.addMessage[
    3]);
  }
  var b = new google.maps.LatLngBounds();
  this.routes.each(function (c) {
   "iso_ed80aafa-9a9b-484b-84fb-f78e0661cdd2_iso";
   c.path.each(function (d) {
    "iso_e8ed91d1-f12c-4919-84b7-a05479c135fa_iso";
    b.extend(d.latLng);
   });
  });
  this.map.fitBounds(b);
  return a;
 },
 initMap: function () {
  "iso_4fff425a-13de-460e-8b08-60c13079da44_iso";
  var a = this._getMapTypes();
  this.map = new google.maps.Map(this.container.getElement(".map"), {
   center: new google.maps.LatLng(54.5, -3.2),
   zoom: 6,
   mapTypeId: a[0],
   streetViewControl: false,
   mapTypeControlOptions: {
    mapTypeIds: a
   }
  });
  this._addMapTypes();
 },
 _getMapTypes: function () {
  "iso_93a0b471-5009-4cd4-8f4f-e68767e08be6_iso";
  return [google.maps.MapTypeId.ROADMAP, "watercolor", google.maps.MapTypeId
   .SATELLITE
  ];
 },
 _addMapTypes: function () {
  "iso_78e21ba2-de5c-40a1-9210-dddf0bf1577c_iso";
  var a = function (h, e, d) {
   "iso_485fb7b6-c6bf-4442-800a-8310c0c5ef9b_iso";
   var g = h.y;
   var c = h.x;
   var f = 1 << e;
   if (g < 0 || g >= f) {
    return null;
   }
   if (c < 0 || c >= f) {
    c = (c % f + f) % f;
   }
   return d({
    x: c,
    y: g
   }, e);
  };
  var b = {
   getTileUrl: function (d, c) {
    "iso_53ca80c4-2167-4285-a202-6afde10d64ba_iso";
    return a(d, c, function (f, e) {
     "iso_34bac31f-0d88-453a-b72b-10b94360752e_iso";
     return "http://tile.stamen.com/watercolor/" + e + "/" + f.x + "/" +
      f.y + ".jpg";
    });
   },
   tileSize: new google.maps.Size(256, 256),
   isPng: false,
   maxZoom: 16,
   minZoom: 0,
   radius: 1738e3,
   name: "Watercolour",
   credit: "Stamen"
  };
  this.map.mapTypes.set("watercolor", new google.maps.ImageMapType(b));
  google.maps.event.addListener(this.map, "maptypeid_changed", this.updateCopyrights
   .bind(this));
  copyrightNode = document.createElement("div");
  copyrightNode.set("id", "copyright-control");
  copyrightNode.index = 0;
  this.copyright = copyrightNode;
  this.map.controls[google.maps.ControlPosition.BOTTOM_RIGHT].push(
   copyrightNode);
  var b = {
   getTileUrl: function (d, c) {
    "iso_793f9f0f-c604-4659-ad0a-0c34405a58a5_iso";
    return a(d, c, function (f, e) {
     "iso_dbe14090-cad9-48db-be78-5549bb056468_iso";
     return "http://khmdbs0.google.com/pm?v=8&src=app&x=" + f.x + "&y=" +
      f.y + "&z=" + e + "&s=";
    });
   },
   tileSize: new google.maps.Size(256, 256),
   isPng: false,
   maxZoom: 14,
   minZoom: 0,
   radius: 1738e3,
   name: "Treasure",
   credit: "Google"
  };
  this.map.mapTypes.set("treasure", new google.maps.ImageMapType(b));
 },
 updateCopyrights: function () {
  "iso_7f5fceb4-70b6-4049-b8c8-db7a3c4e9e43_iso";
  var a = "Game &copy; Duncan Barclay. ";
  switch (this.map.getMapTypeId()) {
  case "watercolor":
   a +=
    'Map tiles by <a href="http://stamen.com">Stamen Design</a>, under <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>. Data by <a href="http://openstreetmap.org">OpenStreetMap</a>, under <a href="http://creativecommons.org/licenses/by-sa/3.0">CC BY SA</a>.';
  }
  a += ' <a class="copyright-link">(full info)</a>';
  this.copyright.set("html", a);
  this.ui.initMiscButtons(this.copyright);
 },
 showStronghold: function () {
  "iso_1705e3a0-966c-4497-8c1d-0682aa6103af_iso";
  new google.maps.Marker({
   position: this.stronghold,
   map: this.map,
   icon: new google.maps.MarkerImage(this.search.image.home, new google.maps
    .Size(32, 32), new google.maps.Point(0, 0), new google.maps.Point(16,
     16))
  });
  return this;
 },
 addLives: function (a) {
  "iso_b4c6f42f-e849-4e1e-bb8c-5de12c4a8db4_iso";
  this.lives += a;
  this.container.getElements(".controls .lives .count").set("text", this.lives);
 },
 removeLife: function (a) {
  "iso_e9d1f707-9d1f-4084-8b8d-dd888c151fad_iso";
  this.lives -= a;
  this.container.getElements(".controls .lives .count").set("text", this.lives);
  if (this.lives <= 0) {
   this.lose();
  }
 },
 win: function () {
  "iso_3832fc1a-bc9f-4e39-a9ab-fc42a3d31872_iso";
  this.ui.win();
  this.hasWon = true;
  this.analytics("win", this.moneyRounds);
 },
 lose: function () {
  "iso_b45f1eee-3dc8-48dc-928d-1f397e379e89_iso";
  this.gameOver();
  this.ui.lose();
  this.analytics("lose", this.moneyRounds);
 },
 gameOver: function () {
  "iso_12645f77-b8a0-4251-bb4e-03cb5bcf54ab_iso";
  this.timer.pause();
 },
 addMoney: function (b, a) {
  "iso_c823b1f8-167a-4b18-8c96-15d821342338_iso";
  if (this.hasWon && !a) {
   var c = Math.max(10, 25 - (this.moneyRounds - 54)) / 100;
   b = Math.floor(b * c);
  }
  this.money += b;
  this.ui.updateMoney();
  return this;
 },
 removeMoney: function (a) {
  "iso_0dfdb2dc-54d1-4158-97e0-787eb33983f5_iso";
  if (this.money >= a) {
   this.money -= a;
   this.ui.updateMoney();
   return true;
  } else {
   return false;
  }
 },
 analytics: function (a, b) {
  "iso_24714c00-e0ed-4dff-b9a4-cafd4730ae6e_iso";
  _gaq.push(["_trackEvent", "game", a, "", b]);
 },
 restart: function () {
  "iso_5f1a9531-e94e-4a98-9847-6b8f7673e762_iso";
  this.towers.each(function (b) {
   "iso_a2dc0795-2f7a-47dd-8f75-3147419cfa81_iso";
   b.remove();
  });
  this.routes.each(function (b) {
   "iso_04d28c4e-7cbe-4ec4-874b-710cdb666bec_iso";
   b.remove();
  });
  this.ui.restart();
  var a = new this.gameClass(this.container);
  a.gameClass = this.gameClass;
 }
});
var GameInterface = new Class({
 g: null,
 content: null,
 container: null,
 timerMultiplier: 4,
 openTowerInfoWin: null,
 initialize: function (b, a) {
  "iso_9fbf9b4b-f87f-4615-85cb-7fef78070880_iso";
  this.g = b;
  this.container = a;
  this.content = this.container.get("html");
  this._addDocumentPauseEvents();
  this._initTowers();
  this._initPause();
  this._initFastForward();
  this._initNextRound();
  this.initMiscButtons(this.container);
  this.updateLives();
  this.updateMoney();
 },
 startGame: function (b) {
  "iso_35066290-029d-4c4d-a932-edf8616d361a_iso";
  var a = this._fullscreenPopup("info", "startup", {
   noCloseButton: true
  });
  this.startLock = false;
  a.addEvent("action", function (c, e) {
   "iso_02fd1541-8441-4d07-995c-cb5b5d04ce6f_iso";
   if (this.startLock) {
    return;
   }
   this.startLock = true;
   var f = function (i, h) {
    "iso_791cdf93-6d26-4624-a289-b1d2197ae1af_iso";
    var g = new RouteBuilder(this.g, i);
    g.generate(function () {
     "iso_3f941cf1-69a0-44d4-915d-544cb0a20c25_iso";
     a.close();
     for (var k = g.routes.length; k-- > 0;) {
      g.routes[k].show();
     }
     var l = 200;
     var j = 100;
     switch (a.container.getElement(".difficulty-picker").get("value").toLowerCase()) {
     case "insane":
      j = 10;
     case "hard":
      this.g.difficultyMultiplier = 1.6;
      break;
     case "medium":
      this.g.difficultyMultiplier = 1.3;
     }
     this.g.addMoney(l);
     this.g.addLives(j);
     b(i, h, g);
    }.bind(this), function () {
     "iso_e298877b-f1fb-4df9-95d1-a5c9d8010cd9_iso";
     this.startLock = false;
     c.getElement(".error").set("html",
      "We couldn't find any roads around that location for creeps to move along.  Please try somewhere else."
     );
     c.getElement(".error").show();
    }.bind(this));
   }.bind(this);
   var d = "";
   if (e && e.hasClass("known-location")) {
    d = e.get("text");
    if (this.g.map.getMapTypeId() == google.maps.MapTypeId.ROADMAP) {
     this.g.map.setMapTypeId(google.maps.MapTypeId.HYBRID);
    }
   } else {
    d = c.getElement(".search").get("value");
   }
   this.g.geocode(d, f, function () {
    "iso_521be726-7bb4-421e-8282-d2735aea0ab6_iso";
    this.startLock = false;
    c.getElement(".error").set("html",
     "We couldn't find that location.  Please try to be more specific, or search for somewhere else."
    );
    c.getElement(".error").show();
   }.bind(this));
  }.bind(this));
  this.initMiscButtons(a.container);
  if (window.location.hash) {
   a.container.getElement(".search").set("value", window.location.hash.substring(
    1));
   a.container.getElement(".action").fireEvent("click");
  }
 },
 _addDocumentPauseEvents: function () {
  "iso_9c592432-3e94-41fc-b224-b6c1a21b1290_iso";
  var a = "";
  if ("undefined" !== typeof document.hidden) {
   a = "visibilitychange";
  } else {
   if ("undefined" !== typeof document.mozHidden) {
    a = "mozvisibilitychange";
   } else {
    if ("undefined" !== typeof document.msHidden) {
     a = "msvisibilitychange";
    } else {
     if ("undefined" !== typeof document.webkitHidden) {
      a = "webkitvisibilitychange";
     }
    }
   }
  }
  document.addEventListener(a, function () {
   "iso_4189a386-c094-40c9-a2d9-87dc5be5489f_iso";
   this.pause();
  }.bind(this));
 },
 _initPause: function () {
  "iso_40a82557-bfcf-4c8d-af97-cf3dcb8aad16_iso";
  this.container.getElement(".controls .pause").addEvent("click", function (
   a) {
   "iso_d85bf13d-9bf5-4cf0-aba9-899df31de6e9_iso";
   if (this.g.timer.paused) {
    this.g.timer.resume();
    this._stopPause();
   } else {
    this.pause();
   }
  }.bind(this));
 },
 _stopPause: function () {
  "iso_03fc8553-60a2-4e93-bf59-cfea0679ff84_iso";
  this.container.getElement(".controls .pause").removeClass("on");
  this.container.getElement(".controls .pause").set("text", "Pause");
 },
 pause: function () {
  "iso_a4fefc0f-2097-42c0-a9ea-ed71821a1e3e_iso";
  this.g.timer.pause();
  this.container.getElement(".controls .pause").addClass("on");
  this.container.getElement(".controls .pause").set("text", "Resume");
 },
 fastForwardOff: function () {
  "iso_6114c021-20ca-4025-9ae1-b529f4552e5f_iso";
  this.g.timer.setMultiplier(1);
  this.container.getElement(".controls .fast-forward").removeClass("on");
 },
 _initFastForward: function () {
  "iso_52f12737-c245-4ffb-8ef3-5ce8558c8c64_iso";
  this.container.getElement(".controls .fast-forward").addEvent("click",
   function (a) {
    "iso_9db5c847-7245-48dd-9fd0-766bf1d9efd3_iso";
    if (this.g.timer.multiplier > 1) {
     this.fastForwardOff();
    } else {
     this.g.timer.setMultiplier(this.timerMultiplier);
     a.target.addClass("on");
    }
   }.bind(this));
 },
 updateLives: function () {
  "iso_1bcaf452-78e8-41b4-a589-7af0e45f51d2_iso";
  this.container.getElements(".controls .lives .count").set("text", this.g.lives);
 },
 updateRound: function (a) {
  "iso_5d81ab25-fb25-4a78-8e31-ba11f1f23303_iso";
  this.container.getElements(".controls .round .count").set("text", a);
 },
 updateMoney: function () {
  "iso_b62903b4-e6eb-4015-a9b0-d59973e44bfe_iso";
  this.container.getElements(".controls .money .amount").set("text", this.g.money);
  this.container.getElements(".controls .create-tower").each(function (b) {
   "iso_91587597-079c-498d-9435-87966c7e1498_iso";
   var a = this._getTowerType(b);
   if (a.prototype.cost > this.g.money) {
    b.addClass("disabled");
   } else {
    b.removeClass("disabled");
   }
  }.bind(this));
  if (this.openTowerInfoWin) {
   this.updateTowerInfoWin();
  }
 },
 _initNextRound: function () {
  "iso_61ba7eb2-dae8-4c87-9d9d-9a68449aee68_iso";
  this.container.getElement(".controls .next-round").set("slide", {
   duration: 1,
   transition: false
  }).slide("out");
  this.container.getElement(".controls .next-round .button").addEvent(
   "click",
   function () {
    "iso_be1e2f1e-aa8f-4717-b5dd-3bff5d026d38_iso";
    this.container.getElement(".controls .next-round-popup").hide();
    this.container.getElement(".controls .next-round").set("slide", {
     duration: "short",
     transition: "expo:out"
    });
    this.container.getElement(".controls .next-round").slide("out");
    this.g.timer.resume();
    this._stopPause();
    if ((this.g.moneyRounds + 1) % 2) {
     this.g.analytics("nextRound", this.g.moneyRounds);
    }
   }.bind(this));
 },
 nextRound: function () {
  "iso_9ede4a55-2770-4f1d-b84f-821836ccd1a8_iso";
  this.container.getElement(".controls .next-round").setStyle("visibility",
   "visible").set("slide", {
   duration: "long",
   transition: "bounce:out"
  });
  this.container.getElement(".controls .next-round").slide("in");
  if (1 == this.g.currentRound) {
   this.container.getElement(".controls .next-round-popup").show();
   this.container.getElement(".tower-info-popup").show();
  }
 },
 _getTowerType: function (b) {
  "iso_8e808c4d-2614-4a91-9952-8c5604fcd2a6_iso";
  var a = false;
  switch (b.get("name")) {
  case "alpha":
   a = TowerAlpha;
   break;
  case "bravo":
   a = TowerBravo;
   break;
  case "charlie":
   a = TowerCharlie;
   break;
  case "delta":
   a = TowerDelta;
   break;
  case "echo":
   a = TowerEcho;
   break;
  case "foxtrot":
   a = TowerFoxtrot;
  }
  return a;
 },
 _initTowers: function () {
  "iso_06fdd8fc-df97-40c6-971a-50d1f207597d_iso";
  this.updateTowerImages();
  var b = function () {};
  b.prototype = new google.maps.OverlayView();
  b.prototype.onAdd = function () {};
  b.prototype.onRemove = function () {};
  b.prototype.draw = function () {};
  var a = new b();
  this.container.getElements(".controls .create-tower").each(function (h) {
   "iso_2b51a999-a6a5-40e4-b826-da286b4f248d_iso";
   var f = this._getTowerType(h);
   if (!f) {
    return;
   }
   var e = this.container.getElement(
    ".hidden-elements .control-tower-mouseover .content").clone();
   e.inject(h.getSiblings(".popup")[0]);
   e.getElements(".value").each(function (i) {
    "iso_8b0b5a08-c04a-4fad-911e-fbad587a8e03_iso";
    if (i.getAttribute("data-name") && f.prototype[i.getAttribute(
      "data-name")]) {
     i.set("text", f.prototype[i.getAttribute("data-name")]);
    }
   });
   var d = function (i) {
    "iso_5bdc28c7-1c70-4d5f-95b7-16f6abd9f719_iso";
    h.getSiblings(".popup").show();
   }.bind(this);
   var c = function (i) {
    "iso_394d807f-7b9c-4f54-a818-875db1c7ecfc_iso";
    h.getSiblings(".popup").hide();
   }.bind(this);
   h.addEvent("mouseenter", d);
   h.addEvent("mouseout", c);
   var g = function (l) {
    "iso_f4e0689a-17d3-42b0-ba66-2b11b6754cd4_iso";
    l.stop();
    c();
    h.removeEvent("mouseenter", d);
    a.setMap(this.g.map);
    var n = new f(this.g, this.g.stronghold);
    var j = this.g.map.getDiv().getPosition();
    var k = this.g.map.getDiv().getSize();
    var p = function (q) {
     "iso_8584d4aa-3422-4382-84f5-5585f125d1a8_iso";
     xPos = q.event.clientX - j.x;
     yPos = q.event.clientY - j.y;
     return xPos > 0 && xPos < k.x && yPos > 0 && yPos < k.y;
    };
    var o = l.event.clientX || l.event.touches[0].clientX;
    var m = l.event.clientY || l.event.touches[0].clientY;
    iconX = o - h.getPosition().x;
    iconY = m - h.getPosition().y;
    controlSize = h.getSize();
    var i = {};
    i = {
     mouseup: function (q) {
      "iso_ace8ba20-389f-4533-80db-9935688fc4d1_iso";
      document.removeEvents(i);
      h.setStyles({
       position: "static",
       visibility: "visible"
      });
      h.addEvent("mouseenter", d);
      a.setMap(null);
      if (!p(q) || !n.checkDroppable()) {
       n.remove();
      } else {
       n.drop();
       this.g.towers.push(n);
      }
     }.bind(this),
     mousemove: function (r) {
      "iso_791617f0-21eb-4d17-a013-dedf9649440a_iso";
      r.stop();
      var t = r.event.clientX || r.event.touches[0].clientX;
      var s = r.event.clientY || r.event.touches[0].clientY;
      var u = a.getProjection().fromContainerPixelToLatLng(new google.maps
       .Point(t - j.x + (controlSize.x / 2 - iconX), s - j.y + (
        controlSize.y - iconY)));
      n.move(u).show().showAttackRadius();
      n.checkDroppable();
      var q = {
       position: "absolute",
       left: t - iconX,
       top: s - iconY,
       zIndex: 100,
       visibility: p(r) ? "hidden" : "visible"
      };
      h.setStyles(q);
     }.bind(this)
    };
    document.addEvent("mouseup", i.mouseup);
    document.addEvent("mousemove", i.mousemove);
    document.addEvent("touchend", i.mouseup);
    document.addEvent("touchmove", i.mousemove);
    if (this.container.getElement(".tower-info-popup")) {
     this.container.getElement(".tower-info-popup").destroy();
    }
   }.bind(this);
   h.addEvent("mousedown", g);
   h.addEvent("touchstart", g);
   h.addEvent("mouseup", function (i) {
    "iso_60ad276b-c42d-4282-ab25-995a6d932547_iso";
    h.addEvent("mouseenter", d);
   });
  }.bind(this));
 },
 showTowerInfoWin: function (b) {
  "iso_525d7932-8807-4f70-8d98-4b5b7ddcef1f_iso";
  if (this.openTowerInfoWin) {
   this.openTowerInfoWin.deselected();
  }
  this.openTowerInfoWin = b;
  var a = this.container.getElement(
   ".hidden-elements .control-tower-infowin .content").clone();
  a.getElements(".value").each(function (c) {
   "iso_e70c0e8e-e57e-4d69-a8cb-1605cedd29c0_iso";
   if (c.getAttribute("data-name") && b[c.getAttribute("data-name")]) {
    c.set("text", b[c.getAttribute("data-name")]);
   }
  });
  a.getElements(".special-value").each(function (c) {
   "iso_c1bad7ed-2688-4261-acb3-19994e8ba008_iso";
   var e = "";
   switch (c.getAttribute("data-name")) {
   case "sell-cost":
    e = b.getSellCost();
   }
   c.set("text", e);
  });
  a.getElement(".sell").addEvent("click", function (c) {
   "iso_ba054d2a-d5d5-4c54-ae68-b467b828043f_iso";
   b.sell();
  });
  a.getElements(".upgrade").each(function (c, e) {
   "iso_01ff9420-ded8-4ff8-8391-607f42516fc2_iso";
   if (!b.upgrades[e]) {
    return;
   }
   var g = {
    attackRadius: b.attackRadius,
    damage: b.damage,
    attackSpeed: b.attackSpeed
   };
   var f = true;
   b.upgrades[e].each(function (h) {
    "iso_3246e8f8-e454-4cb4-bf1e-426cb7012f6f_iso";
    if (h.applied) {
     return;
    }
    var i = this.container.getElement(
     ".hidden-elements .control-tower-infowin-upgrade .content").clone();
    i.getElements(".value").each(function (j) {
     "iso_b932c087-daad-4976-a132-802e283ef986_iso";
     if (j.getAttribute("data-name") && h[j.getAttribute("data-name")]) {
      j.set("text", h[j.getAttribute("data-name")]);
     }
    });
    i.getElements(".add-value").each(function (j) {
     "iso_c3032342-8da2-4ceb-ae43-cf2c027a9929_iso";
     if (j.getAttribute("data-name") && b[j.getAttribute("data-name")]) {
      upgradeValue = h[j.getAttribute("data-name")];
      if (!upgradeValue) {
       upgradeValue = 0;
      }
      g[j.getAttribute("data-name")] += upgradeValue;
      j.set("text", g[j.getAttribute("data-name")]);
     }
    });
    if (h.applied) {
     i.addClass("applied");
    }
    i.getElement(".button").addClass("disabled").set("disabled", true);
    if (f) {
     i.getElement(".button").setAttribute("data-cost", h.cost);
     i.getElement(".button").addEvent("click", function (j) {
      "iso_f94f2aa2-d7f1-4217-bfcd-1d0b0fcec83c_iso";
      b.upgrade(h);
     }.bind(this));
     f = false;
    } else {
     i.getElement(".button").setAttribute("data-cost", 0);
    }
    i.inject(c);
   }.bind(this));
  }.bind(this));
  a.getElements(".upgrade").each(function (c, e) {
   "iso_8da4797d-4366-4151-94f9-63c4bb2adfb6_iso";
   if (!c.getChildren().length) {
    c.destroy();
   }
  });
  if (!a.getElements(".upgrade").length) {
   a.getElement(".upgrade-message").set("text", "No upgrades available");
  }
  b.selected();
  var d = this.container.getElement(".tower-infowin-container");
  a.getElements(".close").addEvent("click", function (c) {
   "iso_ea1ee457-3391-4b6c-b8a7-ff68b5c43fe0_iso";
   this.closeTowerInfoWin(b);
  }.bind(this));
  d.set("html", "");
  a.inject(d);
  d.show();
  this.updateTowerInfoWin();
 },
 updateTowerInfoWin: function () {
  "iso_04e86829-9ac0-4522-96c5-dc0b04f44f92_iso";
  this.container.getElements(".tower-infowin-container .upgrade .button").each(
   function (a) {
    "iso_92addcb5-8a80-4874-9c32-767c7af48189_iso";
    var b = a.getAttribute("data-cost");
    if (b <= 0) {
     return;
    }
    if (this.g.money >= b) {
     if (a.hasClass("disabled")) {
      a.removeClass("disabled").set("disabled", false);
     }
    } else {
     if (!a.hasClass("disabled")) {
      a.addClass("disabled").set("disabled", true);
     }
    }
   }.bind(this));
 },
 closeTowerInfoWin: function (a) {
  "iso_45c7df56-2309-417f-af48-94d8d8245df3_iso";
  if (this.openTowerInfoWin != a) {
   return;
  }
  this.openTowerInfoWin.deselected();
  this.openTowerInfoWin = null;
  this.container.getElement(".tower-infowin-container").hide();
 },
 win: function () {
  "iso_b6300a7b-3906-41d9-af67-d8a711847aed_iso";
  var a = this._fullscreenPopup("success", "win");
  a.addEvent("action", function () {
   "iso_8ec1ab0c-1baf-4842-940d-47468be3615a_iso";
   this.g.restart();
   a.close();
  }.bind(this));
  a.container.getElement(".action-twitter").set("data-text",
   "I made it to round 50 on #MapsTowerDefence!").addClass(
   "twitter-share-button");
  twitter(document, "script", "twitter-wjs-" + new Date());
  a.addEvent("social", function (b) {
   "iso_30d7c2a2-d1c3-4710-8fc1-b0ed4ed270d1_iso";
   switch (b) {
   case "facebook":
    this.publishFacebook("I made it to round 50 on Maps Tower Defence!");
   }
  }.bind(this));
 },
 lose: function () {
  "iso_e051013a-f8cf-48e4-8615-d0a3579a1f1c_iso";
  var a = this._fullscreenPopup("error", "game-over");
  a.addEvent("action", function () {
   "iso_55729d39-fe35-4c8f-bd26-fee71cd6439e_iso";
   this.g.restart();
   a.close();
  }.bind(this));
  a.container.getElement(".action-twitter").set("data-text",
   "I made it to round " + this.g.moneyRounds + " on #MapsTowerDefence!").addClass(
   "twitter-share-button");
  twitter(document, "script", "twitter-wjs-" + new Date());
  a.addEvent("social", function (b) {
   "iso_7e5b4ea0-9e1f-4135-93fd-86bd37ba4007_iso";
   switch (b) {
   case "facebook":
    this.publishFacebook("I made it to round " + this.g.moneyRounds +
     " on Maps Tower Defence!");
   }
  }.bind(this));
 },
 _fullscreenPopup: function (b, c, a) {
  "iso_48109741-0a26-4eee-afb6-e8f20aef3a7a_iso";
  return new Message("fullscreen", b, this.container.getElement(
   ".hidden-elements").getChildren("." + c)[0].clone(), a);
 },
 initMiscButtons: function (a) {
  "iso_fbc58577-ad98-48b2-8320-0c12a8c61382_iso";
  a.getElements(".button.help").addEvent("click", function (b) {
   "iso_3412d185-0e65-4160-9d57-70cae52397c0_iso";
   this.pause();
   this._fullscreenPopup("info", "help");
  }.bind(this));
  a.getElements(".button.about").addEvent("click", function (b) {
   "iso_03c6e8ec-d751-4c41-86bd-c3bb2ad791fa_iso";
   this.pause();
   this._fullscreenPopup("info", "about");
  }.bind(this));
  a.getElements(".button.feedback").addEvent("click", function (b) {
   "iso_fb2f6de1-c56e-4f31-89fc-9b66a1eebe43_iso";
   this.pause();
   this._fullscreenPopup("info", "feedback");
  }.bind(this));
  a.getElements(".button.chat").addEvent("click", function (b) {
   "iso_e37345ba-c347-4b21-94b8-1341ba2ea984_iso";
   var c = window.open(
    "http://webchat.quakenet.org/?channels=MapsTD&uio=d4", "MapsTD Chat",
    "width=647,height=400");
   if (window.focus) {
    c.focus();
   }
  }.bind(this));
  a.getElements(".copyright-link").addEvent("click", function (b) {
   "iso_f7376982-aa38-4c8d-a58a-1b32f06e5659_iso";
   b.stop();
   this.pause();
   this._fullscreenPopup("info", "copyright-popup");
  }.bind(this));
 },
 updateTowerImages: function () {
  "iso_e62874a6-e28a-4905-a0f3-ecae6a61a5fe_iso";
  this.container.getElements(".controls .create-tower").each(function (b) {
   "iso_42e05d2a-7472-46b3-a28f-81141bb4030c_iso";
   var a = this._getTowerType(b);
   if (!a) {
    return;
   }
   b.setStyles({
    "background-image": 'url("' + this.g.search.image.towers + '")',
    "background-position": "0 -" + 32 * (a.prototype.markerOffset + 2) +
     "px",
    width: "32px",
    height: "32px",
    border: "0"
   });
  }.bind(this));
 },
 restart: function () {
  "iso_b2c11eb1-4899-4e51-8260-3aaccabe5da9_iso";
  this.container.set("html", this.content);
 },
 publishFacebook: function (b) {
  "iso_4e486987-c8bc-40c0-960c-8da6ae65f718_iso";
  FB.init({
   appId: "267555096654594",
   status: true,
   cookie: true
  });
  var a = {
   method: "feed",
   link: "http://www.mapstd.com/",
   picture: "http://www.mapstd.com/images/avatar.png",
   name: b,
   description: "Maps Tower Defence is a tower defence game on Google Maps. Defend your home from enemies!",
   redirect_uri: "http://www.mapstd.com/close.html"
  };
  FB.ui(a, function () {});
 },
 publishTwitter: function (a) {}
});
var RouteBuilder = new Class({
 routes: [],
 g: null,
 start: null,
 searchedRoutes: 0,
 addedRoutes: 0,
 actions: {},
 initialize: function (a, b) {
  "iso_ae597c3c-5c6b-46c6-a983-de84f7726ca4_iso";
  this.g = a;
  this.start = b;
 },
 generate: function (b, a) {
  "iso_5bfcb88f-5afa-4a60-906b-3bedd88d4cd2_iso";
  this.actions = {
   success: b,
   failure: a
  };
  this.searchedRoutes += 4;
  this.tmpRoutes = {};
  new Route(this.g, this.start, new google.maps.LatLng(this.start.lat() + .02,
   this.start.lng()), function (c) {
   "iso_5475f25b-ce59-447f-968b-8e6135edbc60_iso";
   this._add(c, "north");
  }.bind(this), function () {
   "iso_1ee95fbe-9843-471c-a9b4-ca689ddd4e60_iso";
   this._fail();
  }.bind(this));
  new Route(this.g, this.start, new google.maps.LatLng(this.start.lat(),
   this.start.lng() + .04), function (c) {
   "iso_b8a2d1ca-ed9b-40fc-8ab1-d8f2a63ad86e_iso";
   this._add(c, "east");
  }.bind(this), function () {
   "iso_9fa15da0-1176-4bac-ab1d-979ce64c006e_iso";
   this._fail();
  }.bind(this));
  new Route(this.g, this.start, new google.maps.LatLng(this.start.lat() - .02,
   this.start.lng()), function (c) {
   "iso_90148948-0723-4391-a632-d4fd2cc0968c_iso";
   this._add(c, "south");
  }.bind(this), function () {
   "iso_796d226a-783b-4327-b298-0b3f72d6e627_iso";
   this._fail();
  }.bind(this));
  new Route(this.g, this.start, new google.maps.LatLng(this.start.lat(),
   this.start.lng() - .04), function (c) {
   "iso_a9e12721-d177-43bb-90e3-19c304de04f1_iso";
   this._add(c, "west");
  }.bind(this), function () {
   "iso_fccf0694-d8de-4c49-a333-3e62a71460c3_iso";
   this._fail();
  }.bind(this));
 },
 _add: function (a, b) {
  "iso_1a7e3602-186f-49f1-8cd0-87d1a6ba6957_iso";
  this.tmpRoutes[b] = a;
  a.compass = b;
  this._addedRoute();
 },
 _fail: function () {
  "iso_7bec23eb-bc45-42e8-a445-5d66d4c13efd_iso";
  this._addedRoute();
 },
 _addedRoute: function () {
  "iso_4750b7f3-0ed2-44df-8b41-8dba1a607299_iso";
  this.searchedRoutes--;
  if (this.searchedRoutes) {
   return;
  }
  if (this.tmpRoutes.north) {
   this.routes.push(this.tmpRoutes.north);
  }
  if (this.tmpRoutes.east) {
   this.routes.push(this.tmpRoutes.east);
  }
  if (this.tmpRoutes.south) {
   this.routes.push(this.tmpRoutes.south);
  }
  if (this.tmpRoutes.west) {
   this.routes.push(this.tmpRoutes.west);
  }
  if (!this.routes.length) {
   return this.actions.failure();
  }
  for (var a = 1; a < this.routes.length; a++) {
   this.routes[a].addMessage = ["top", "success",
    "Let's make this a bit harder.  <b>New route added to the " + this.routes[
     a].compass + ".</b>", {
     autoHide: 15e3
    }
   ];
  }
  var a = 0;
  while (this.routes.length < 4) {
   var b = this.routes[a++].clone();
   b.addMessage = ["top", "error",
    "We couldn't find another route to add to the map, so we've made the " +
    b.compass + " path harder.  Have fun :)", {
     autoHide: 1e4
    }
   ];
   this.routes.push(b);
  }
  return this.actions.success();
 },
 getNextRoute: function () {
  "iso_e4bcb753-299c-4304-878d-0aff8d8473c8_iso";
  return this.routes[this.addedRoutes++];
 }
});
var RoutePath = new Class({
 latLng: null,
 creeps: [],
 towers: [],
 initialize: function (a) {
  "iso_5a9695a7-aa42-4b70-887b-135dd4007f43_iso";
  this.latLng = a;
 },
 addTower: function (a) {
  "iso_dc9cdf46-591a-4c59-b3ce-72725c30e6fa_iso";
  this.towers.push(a);
 },
 removeTower: function (a) {
  "iso_79f4750e-8271-460b-98a5-abe9ee3706f0_iso";
  this.towers.erase(a);
 },
 addCreep: function (a) {
  "iso_c46967e8-c172-44ef-940b-a36a28cb5a62_iso";
  this.creeps.push(a);
  if (this.towers.length) {
   var b = this.towers[0];
   b.removePathEvents();
   b.attack();
  }
 },
 removeCreep: function (a) {
  "iso_df3dc8fd-983c-4629-947c-c93295052d3c_iso";
  this.creeps.erase(a);
 }
});
var Route = new Class({
 g: null,
 start: null,
 end: null,
 path: [],
 serviceResponse: null,
 creeps: [],
 totalPoints: 200,
 marker: null,
 addMessage: null,
 compass: "",
 maxRouteLength: 2e4,
 directionsRenderer: null,
 initialize: function (b, h, a, d, c) {
  "iso_fb52f6bc-58db-4122-b1e7-56e4e6b8fd42_iso";
  if (!b) {
   return;
  }
  this.g = b;
  var f = new google.maps.DirectionsService();
  var e = {
   origin: a,
   destination: h,
   travelMode: google.maps.TravelMode.DRIVING
  };
  var g = function (l, j) {
   "iso_3873e2f9-e6ea-4d5f-9160-b646c2f14f03_iso";
   var q = [];
   var p = null;
   for (var m = 0; m < j.path.length; m++) {
    var r = j.path[m];
    if (p) {
     q.push({
      distance: google.maps.geometry.spherical.computeDistanceBetween(p,
       r),
      start: p,
      end: r
     });
    }
    p = r;
   }
   var k = j.distance / this.totalPoints;
   var o = k;
   for (var m = 0; m < q.length; m++) {
    var s = q[m];
    var u = (s.start.lat() - s.end.lat()) / s.distance;
    var t = (s.start.lng() - s.end.lng()) / s.distance;
    var r = s.start;
    var n = s.distance;
    while (o + n >= k) {
     var v = k - o;
     if (0 != v) {
      r = new google.maps.LatLng(r.lat() - u * v, r.lng() - t * v);
      n -= v;
     }
     this.path.push(new RoutePath(r));
     o = 0;
    }
    o += n;
   }
   this.path.push(new RoutePath(q[q.length - 1].end));
   this.start = this.path[0];
   this.end = this.path[this.path.length - 1];
   this.serviceResponse = l;
   if (d) {
    d(this);
   }
  }.bind(this);
  new Request({
   url: "https://api.openrouteservice.org/v2/directions/driving-car?api_key=5b3ce3597851110001cf62488d20864d79704057b53a3dd46ed49c46&start=" +
    a.lng() + "," + a.lat() + "&end=" + h.lng() + "," + h.lat(),
   urlEncoded: false,
   method: "GET",
   headers: {
    "content-type": "application/json;charset=UTF-8"
   },
   onSuccess: function (o) {
    "iso_db1de9d3-40c6-4662-8c1c-e175f5d59abe_iso";
    var n = JSON.parse(o);
    if (!n || !n.features || !n.features.length) {
     return c(this);
    }
    var m = n.features[0];
    var k = {
     bounds: new google.maps.LatLngBounds(new google.maps.LatLng(m.bbox[
      1], m.bbox[0]), new google.maps.LatLng(m.bbox[3], m.bbox[2])),
     copyrights: n.metadata["attribution"],
     legs: [{
      distance: m.properties["summary"]["distance"],
      start_location: a,
      end_location: h,
      steps: [{
       distance: m.properties["summary"]["distance"],
       start_location: a,
       end_location: h,
       instructions: "",
       path: [],
       travel_mode: google.maps.TravelMode.DRIVING
      }]
     }],
     overview_path: [],
     overview_polyline: "",
     warnings: [],
     waypoint_order: []
    };
    for (var l in m.geometry["coordinates"]) {
     var j = m.geometry["coordinates"][l];
     if (isNaN(j[0]) || isNaN(j[1])) {
      continue;
     }
     k.overview_path.push(new google.maps.LatLng(j[1], j[0]));
    }
    k.legs[0]["steps"][0]["path"] = k.overview_path;
    response = {
     routes: [k],
     request: {
      travelMode: google.maps.TravelMode.DRIVING,
      end_location: h,
      start_location: a
     }
    };
    var p = {
     path: k.overview_path,
     distance: m.properties["summary"]["distance"]
    };
    return g(response, p);
   }.bind(this),
   onFailure: function () {
    "iso_857759aa-815f-4853-8c0d-cd60e881da70_iso";
    console.log("Using Google Maps for directions");
    f.route(e, function (j, i) {
     "iso_324eb970-8280-4de0-8493-41d26dac2de6_iso";
     var k = {};
     switch (i) {
     case google.maps.DirectionsStatus.OK:
      k = {
       path: j.routes[0].overview_path,
       distance: j.routes[0].legs[0].distance.value
      };
      if (k.distance > this.maxRouteLength) {
       return c(this);
      }
      break;
     case google.maps.DirectionsStatus.ZERO_RESULTS:
     default:
      return c(this);
     }
     return g(j, k);
    });
   }.bind(this)
  }).send();
 },
 clone: function () {
  "iso_588d1ca9-4939-4f94-bf10-60395f6bf1da_iso";
  var a = new Route();
  a.g = this.g;
  a.start = this.start;
  a.end = this.end;
  a.serviceResponse = this.serviceResponse;
  a.compass = this.compass;
  this.path.each(function (b) {
   "iso_1a548fad-ac1b-4387-9390-7c075515d884_iso";
   a.path.push(new RoutePath(b.latLng));
  });
  return a;
 },
 show: function () {
  "iso_be06822b-8f26-48ed-822e-18f0483610da_iso";
  this.directionsRenderer = new google.maps.DirectionsRenderer({
   suppressMarkers: true,
   preserveViewport: true,
   polylineOptions: {
    strokeColor: "#0000ff",
    strokeOpacity: .5
   }
  });
  this.directionsRenderer.setMap(this.g.map);
  this.directionsRenderer.setDirections(this.serviceResponse);
 },
 enable: function () {
  "iso_005a4610-0de3-42fc-9d69-de7687dfabae_iso";
  this.directionsRenderer.setOptions({
   polylineOptions: {
    strokeColor: "#0000ff",
    strokeOpacity: 1,
    strokeWeight: 5
   }
  });
  this.directionsRenderer.setMap(this.g.map);
  this.marker = new google.maps.Marker({
   position: this.start.latLng,
   map: this.g.map,
   icon: new google.maps.MarkerImage(this.g.search.image.routeend, new google
    .maps.Size(32, 32), new google.maps.Point(0, 32), new google.maps.Point(
     16, 32))
  });
  return this;
 },
 remove: function () {
  "iso_400ccaaa-c443-4cb8-b757-57de6a6e32e9_iso";
  this.creeps.each(function (a) {
   "iso_74b8d86f-f152-412f-9836-dcf872d23a3b_iso";
   a.remove();
  });
  this.marker.setMap(null);
  this.directionsRenderer.setMap(null);
  this.g.routes.erase(this);
 },
 addCreep: function (b) {
  "iso_51792950-9211-4291-b496-be8e498a42f9_iso";
  var a = new b(this.g, this);
  this.creeps.push(a);
  return a;
 }
});
var Creep = new Class({
 Implements: [Events],
 g: null,
 route: null,
 marker: null,
 markerOffset: 0,
 distanceTravelled: 0,
 health: 100,
 speed: 100,
 reward: 1,
 maxHealth: 100,
 showMoveModulus: 1,
 initialize: function (b, a) {
  "iso_f5fe3388-6377-40f1-b3a4-be731cd0cc20_iso";
  this.g = b;
  this.route = a;
  this.health = Math.floor(this.health * this.g.difficultyMultiplier);
  this.maxHealth = this.health;
 },
 show: function () {
  "iso_de6ed873-8945-47e4-957a-d522d0cc6908_iso";
  this.marker = new google.maps.Marker({
   position: this.route.start.latLng,
   icon: new google.maps.MarkerImage(this.g.search.image.creeps, new google
    .maps.Size(32, 32), new google.maps.Point(0, 32 * (this.markerOffset +
     12)), new google.maps.Point(16, 32)),
   map: this.g.map,
   shadow: new google.maps.MarkerImage("images/creep-health.png", new google
    .maps.Size(16, 8), new google.maps.Point(0, 0), new google.maps.Point(
     8, 32))
  });
  return this;
 },
 move: function () {
  "iso_962e4d6d-e1fb-4baa-97c1-2edb265b1748_iso";
  if (this.health <= 0) {
   return;
  }
  this.route.path[this.distanceTravelled].removeCreep(this);
  if (this.distanceTravelled >= this.route.path.length - 1) {
   this.endOfRoute();
   return this;
  }
  this.distanceTravelled++;
  this.route.path[this.distanceTravelled].addCreep(this);
  if (1 == this.g.timer.multiplier || !(this.distanceTravelled % this.showMoveModulus)) {
   this.marker.setPosition(this.route.path[this.distanceTravelled].latLng);
  }
  this.g.timer.start(this, this.move, 2 * this.speed);
  return this;
 },
 remove: function () {
  "iso_69961eb9-7ff4-4e52-b9a6-6092187a3ca0_iso";
  this.route.path[this.distanceTravelled].removeCreep(this);
  this.marker.setMap(null);
 },
 endOfRoute: function () {
  "iso_db9dcf47-e1ae-4cfd-bf14-041977a85280_iso";
  this.remove();
  this.g.removeLife(1);
  this.fireEvent("killed");
 },
 hit: function (b) {
  "iso_7771785b-5471-4c02-88b6-e6b916f23276_iso";
  this.health -= b;
  var a = this.marker.getShadow();
  a.origin.y = 8 * Math.round(14 * (1 - this.health / this.maxHealth), 0);
  this.marker.setShadow(a);
  if (this.health <= 0) {
   this.g.addMoney(this.reward);
   this.remove();
   this.fireEvent("killed");
  }
 }
});
var CreepAlpha = new Class({
 Extends: Creep,
 markerOffset: 0,
 health: 150,
 speed: 50,
 reward: 1
});
var CreepBravo = new Class({
 Extends: Creep,
 markerOffset: 1,
 health: 250,
 speed: 50,
 reward: 3
});
var CreepCharlie = new Class({
 Extends: Creep,
 markerOffset: 2,
 health: 500,
 speed: 40,
 reward: 6
});
var CreepDelta = new Class({
 Extends: Creep,
 markerOffset: 3,
 health: 1e3,
 speed: 50,
 reward: 12
});
var CreepEcho = new Class({
 Extends: Creep,
 markerOffset: 4,
 health: 2e3,
 speed: 60,
 reward: 20
});
var CreepFoxtrot = new Class({
 Extends: Creep,
 markerOffset: 5,
 health: 3e3,
 speed: 70,
 reward: 30
});
var CreepGolf = new Class({
 Extends: Creep,
 markerOffset: 6,
 health: 5e3,
 speed: 90,
 reward: 35
});
var CreepHotel = new Class({
 Extends: Creep,
 markerOffset: 7,
 health: 8e3,
 speed: 100,
 reward: 35
});
var CreepIndia = new Class({
 Extends: Creep,
 markerOffset: 8,
 health: 75e3,
 speed: 150,
 reward: 35
});
var Tower = new Class({
 g: null,
 marker: null,
 infoWindow: null,
 infoWindowOpen: null,
 attackRadius: 500,
 attackRadiusCircle: null,
 sizeCircle: null,
 size: 100,
 routeOverlap: [],
 damage: 100,
 attackSpeed: 5,
 cost: 105,
 name: "",
 markerOffset: 0,
 upgrades: [],
 removed: false,
 initialize: function (a, b) {
  "iso_84d769b7-db20-4e49-a446-725deab1a34a_iso";
  this.g = a;
  this.marker = new google.maps.Marker({
   icon: new google.maps.MarkerImage(this.g.search.image.towers, new google
    .maps.Size(32, 32), new google.maps.Point(0, 32 * (this.markerOffset +
     2)), new google.maps.Point(16, 32)),
   position: b,
   visible: false,
   map: this.g.map
  });
  this.attackRadiusCircle = new google.maps.Circle({
   center: b,
   radius: this.attackRadius,
   clickable: false,
   map: this.g.map,
   visible: false,
   fillColor: "#0000AA",
   fillOpacity: .1,
   strokeOpacity: .2
  });
  this.sizeCircle = new google.maps.Circle({
   center: b,
   radius: this.size,
   clickable: false,
   map: this.g.map,
   visible: false,
   fillColor: "#000000",
   fillOpacity: .7,
   strokeOpacity: .4
  });
 },
 show: function () {
  "iso_0bc0aa91-441a-415d-8cf2-e18c05b8b1f5_iso";
  this.marker.setVisible(true);
  return this;
 },
 hide: function () {
  "iso_d9524433-3960-4629-9e57-d6cbe8aa045c_iso";
  this.marker.setVisible(false);
  this.hideAttackRadius();
  return this;
 },
 move: function (a) {
  "iso_1ab931e7-ac40-48ff-bd5c-3e2ad7249542_iso";
  this.marker.setPosition(a);
  this.attackRadiusCircle.setCenter(a);
  this.sizeCircle.setCenter(a);
  return this;
 },
 remove: function () {
  "iso_5add3d89-c4ec-49e7-b293-3ebe1270741c_iso";
  this.removed = true;
  this.marker.setMap(null);
  this.attackRadiusCircle.setMap(null);
  this.sizeCircle.setMap(null);
  this.g.timer.stopAll(this);
  this.g.ui.closeTowerInfoWin(this);
  this.g.towers.erase(this);
 },
 showAttackRadius: function () {
  "iso_b8949aab-15f8-41b1-8b03-0f0eac9e46c0_iso";
  this.attackRadiusCircle.setVisible(true);
  this.sizeCircle.setVisible(true);
  return this;
 },
 hideAttackRadius: function () {
  "iso_e48f15f8-260e-41a6-8cd8-09c94a9df8a3_iso";
  return this;
  this.attackRadiusCircle.setVisible(false);
  this.sizeCircle.setVisible(false);
  return this;
 },
 selected: function () {
  "iso_112d53c9-f731-4f2d-a867-e17ddfa240ea_iso";
  this.sizeCircle.setOptions({
   fillColor: "#ffffff"
  });
  this.attackRadiusCircle.setOptions({
   strokeOpacity: .8
  });
 },
 deselected: function () {
  "iso_3db63b7a-bab2-4470-95dc-cf79067c59f2_iso";
  this.sizeCircle.setOptions({
   fillColor: "#000000"
  });
  this.attackRadiusCircle.setOptions({
   strokeOpacity: .2
  });
 },
 attack: function (d) {
  "iso_a13f285b-c5e7-4949-b447-390373c4d257_iso";
  if (this.removed) {
   return;
  }
  this.g.timer.stopAll(this);
  var c = [];
  this.routeOverlap.each(function (e) {
   "iso_3405d481-c93c-4aba-af6d-835c1e4ce895_iso";
   e.each(function (f) {
    "iso_33efdb6d-00d9-4196-9f96-b2c0e9375036_iso";
    f.creeps.each(function (g) {
     "iso_7dafe62b-be9b-4470-9d1d-5952b499da99_iso";
     c.push(g);
    }.bind(this));
   }.bind(this));
  }.bind(this));
  c.sort(function (f, e) {
   "iso_b714922d-cde7-4cf2-9abb-459cf7887a5f_iso";
   return f.route.path.length - f.distanceTravelled - (e.route.path.length -
    e.distanceTravelled);
  });
  var b = 0;
  c.each(function (e) {
   "iso_fa09c99b-56c2-4b06-9a7a-2e64f310d4e0_iso";
   if (b >= 1) {
    return;
   }
   b++;
   e.hit(this.damage);
  }.bind(this));
  var a = 200 * (10 - this.attackSpeed + 1);
  if (b) {
   this.g.timer.start(this, this.attack, a);
  } else {
   if (d && d.failAddEvents) {
    this.addPathEvents();
   } else {
    this.g.timer.start(this, this.attack, a, {
     failAddEvents: true
    });
   }
  }
 },
 addPathEvents: function () {
  "iso_dd5c4c7b-8241-4557-9300-f213116a7eb2_iso";
  this.routeOverlap.each(function (a) {
   "iso_010f8366-02d4-4ca2-9d4d-22de66d0967f_iso";
   a.each(function (b) {
    "iso_112c3464-902d-4881-b7eb-29b21766c642_iso";
    b.addTower(this);
   }.bind(this));
  }.bind(this));
 },
 removePathEvents: function () {
  "iso_a4a411fd-e476-486d-9b3f-b899b5f996b8_iso";
  this.routeOverlap.each(function (a) {
   "iso_e75c76c0-d731-4d9b-b8aa-b39ba4c3ab8f_iso";
   a.each(function (b) {
    "iso_f5145525-9b8f-4e49-898b-16dad2af8c9a_iso";
    b.removeTower(this);
   }.bind(this));
  }.bind(this));
 },
 drop: function () {
  "iso_12e6a120-7c1f-4e88-b5c1-937af60c344a_iso";
  if (!this.g.removeMoney(this.cost)) {
   this.remove();
   return;
  }
  this.hideAttackRadius();
  this._addClickEvent();
  this.calculateRouteOverlap();
  if (this.g.ui.openTowerInfoWin) {
   this.g.ui.closeTowerInfoWin(this.g.ui.openTowerInfoWin);
  }
  this.g.timer.start(this, this.attack, 0);
  if (0 == this.g.towers.length) {
   new Message("top", "info", "Click on the tower to view upgrade options.", {
    autoHide: 3e4
   });
  }
 },
 _addClickEvent: function () {
  "iso_f070e43a-b01d-4ba3-aff5-360f61cbdee1_iso";
  google.maps.event.addListener(this.marker, "click", function () {
   "iso_4d64849e-13fc-46a3-b074-d63a7847ca0b_iso";
   this.g.ui.showTowerInfoWin(this);
  }.bind(this));
 },
 calculateRouteOverlap: function () {
  "iso_6560adaf-41bf-470b-b8b6-26c83cccce6b_iso";
  this.g.routes.each(function (b, a) {
   "iso_07befb1c-65c4-4f79-bc69-e886949b1a25_iso";
   this.routeOverlap.push([]);
   b.path.each(function (c) {
    "iso_d0650157-dd6e-402e-b65c-17e52a244fd7_iso";
    if (google.maps.geometry.spherical.computeDistanceBetween(c.latLng,
      this.marker.getPosition()) < this.attackRadius) {
     this.routeOverlap[a].push(c);
    }
   }.bind(this));
  }.bind(this));
 },
 checkDroppable: function () {
  "iso_718ca65b-8f4e-4c5a-8d1f-3c20fb6b4e2b_iso";
  var a = true;
  if (this.g.money < this.cost) {
   a = false;
  }
  if (a) {
   this.g.towers.each(function (b) {
    "iso_1e7812f5-be49-4cf3-b0bc-56adf0faf30d_iso";
    if (b.removed) {
     return;
    }
    if (google.maps.geometry.spherical.computeDistanceBetween(b.marker.getPosition(),
      this.marker.getPosition()) < this.size + b.size) {
     a = false;
    }
   }.bind(this));
  }
  if (a) {
   this.g.foundRoutes.routes.each(function (b) {
    "iso_f9324d61-260d-4b9f-95c0-3dd5caee79ee_iso";
    b.path.each(function (c) {
     "iso_21cae354-3333-454e-84aa-c7056d1d7c07_iso";
     if (google.maps.geometry.spherical.computeDistanceBetween(c.latLng,
       this.marker.getPosition()) < this.size) {
      a = false;
     }
    }.bind(this));
   }.bind(this));
  }
  this.attackRadiusCircle.setOptions({
   fillColor: a ? "#0000AA" : "#AA0000",
   fillOpacity: a ? .1 : .7
  });
  return a;
 },
 upgrade: function (d) {
  "iso_79cfb88e-cf24-408c-b5be-648ba2b136ce_iso";
  var c = [];
  for (var b = 0; b < this.upgrades.length; b++) {
   for (var a = 0; a < this.upgrades[b].length; a++) {
    if (this.upgrades[b][a].applied) {
     continue;
    }
    c.push(this.upgrades[b][a]);
    break;
   }
  }
  for (var b = 0; b < c.length; b++) {
   if (c[b] == d) {
    return this._applyUpgrade(c[b]);
   }
  }
  return false;
 },
 _applyUpgrade: function (a) {
  "iso_e670cc04-644e-4993-9961-7e56362f1cb3_iso";
  if (!this.g.removeMoney(a.cost)) {
   return false;
  }
  this.cost += a.cost;
  a.applied = true;
  if (a.damage) {
   this.damage += a.damage;
  }
  if (a.attackSpeed) {
   this.attackSpeed += a.attackSpeed;
  }
  if (a.attackRadius) {
   this.attackRadius += a.attackRadius;
   this.attackRadiusCircle.setRadius(this.attackRadius);
   this.calculateRouteOverlap();
  }
  this.g.ui.showTowerInfoWin(this);
  return true;
 },
 getSellCost: function () {
  "iso_c245cb1c-59f4-4fa3-954d-c04e6b68dcf6_iso";
  return Math.round(.7 * this.cost, 0);
 },
 sell: function () {
  "iso_62587b40-9e94-46bc-b73f-1b709fb4da28_iso";
  this.g.addMoney(this.getSellCost(), true);
  this.remove();
 }
});
var TowerAlpha = new Class({
 Extends: Tower,
 attackRadius: 700,
 size: 80,
 damage: 90,
 attackSpeed: 5,
 cost: 110,
 name: "Blue Tower",
 markerOffset: 0,
 upgrades: [
  [{
   name: "More Damage 1",
   damage: 50,
   cost: 50
  }, {
   name: "More Damage 2",
   damage: 100,
   cost: 100
  }, {
   name: "More Damage 3",
   damage: 200,
   cost: 200
  }],
  [{
   name: "Faster 1",
   attackSpeed: 1,
   cost: 70
  }, {
   name: "Faster 2",
   attackSpeed: 1,
   cost: 200
  }]
 ]
});
var TowerBravo = new Class({
 Extends: Tower,
 attackRadius: 500,
 size: 120,
 damage: 100,
 attackSpeed: 7,
 cost: 180,
 name: "Green Tower",
 markerOffset: 1,
 upgrades: [
  [{
   name: "More Damage 1",
   damage: 60,
   cost: 70
  }, {
   name: "More Damage 2",
   damage: 70,
   cost: 80
  }, {
   name: "More Damage 3",
   damage: 90,
   cost: 120
  }, {
   name: "More Damage 4",
   damage: 200,
   cost: 300
  }],
  [{
   name: "Range 1",
   attackRadius: 150,
   cost: 150
  }, {
   name: "Range 2",
   attackRadius: 300,
   cost: 200
  }]
 ]
});
var TowerCharlie = new Class({
 Extends: Tower,
 attackRadius: 400,
 size: 120,
 damage: 700,
 attackSpeed: 6,
 cost: 1e3,
 name: "Red Tower",
 markerOffset: 2,
 upgrades: [
  [{
   name: "More Damage 1",
   damage: 250,
   cost: 500
  }, {
   name: "More Damage 2",
   damage: 250,
   cost: 500
  }, {
   name: "More Damage 3",
   damage: 600,
   cost: 1200
  }],
  [{
   name: "Range 1",
   attackRadius: 150,
   cost: 1e3
  }, {
   name: "Range 2",
   attackRadius: 300,
   cost: 1500
  }]
 ]
});
var TowerDelta = new Class({
 Extends: Tower,
 attackRadius: 700,
 size: 175,
 damage: 500,
 attackSpeed: 9,
 cost: 1500,
 name: "Yellow Tower",
 markerOffset: 3,
 upgrades: [
  [{
   name: "More Damage 1",
   damage: 200,
   cost: 750
  }, {
   name: "More Damage 2",
   damage: 400,
   cost: 2e3
  }, {
   name: "More Damage 3",
   damage: 400,
   cost: 2e3
  }],
  [{
   name: "Range 1",
   attackRadius: 150,
   cost: 1e3
  }, {
   name: "Range 2",
   attackRadius: 200,
   cost: 1500
  }]
 ]
});
var TowerEcho = new Class({
 Extends: Tower,
 attackRadius: 500,
 size: 200,
 damage: 3500,
 attackSpeed: 7,
 cost: 4e3,
 name: "Orange Tower",
 markerOffset: 4,
 upgrades: [
  [{
   name: "Faster 1",
   attackSpeed: 1,
   cost: 4e3
  }, {
   name: "Faster 2",
   attackSpeed: 1,
   cost: 4e3
  }],
  [{
   name: "Range 1",
   attackRadius: 150,
   cost: 2500
  }, {
   name: "Range 2",
   attackRadius: 200,
   cost: 4e3
  }]
 ]
});
var TowerFoxtrot = new Class({
 Extends: Tower,
 attackRadius: 600,
 size: 300,
 damage: 5e3,
 attackSpeed: 3,
 cost: 4e3,
 name: "Purple Tower",
 markerOffset: 5,
 upgrades: [
  [{
   name: "More Damage 1",
   damage: 2e3,
   cost: 3e3
  }, {
   name: "More Damage 2",
   damage: 2500,
   cost: 3e3
  }],
  [{
   name: "Faster 1",
   attackSpeed: 1,
   cost: 2500
  }, {
   name: "Faster 2",
   attackSpeed: 1,
   cost: 2500
  }]
 ]
});
var Timer = new Class({
 timers: [],
 paused: false,
 multiplier: 1,
 start: function (a, f, c, d) {
  "iso_4bef4aff-73d2-4fde-b6fe-11e805bd36fd_iso";
  f = f.bind(a);
  var e = {
   object: a,
   callback: f,
   duration: c,
   params: d,
   start: new Date().getTime(),
   timer: null
  };
  if (!this.paused) {
   var b = setTimeout(function () {
    "iso_f50d0b93-866d-491a-80df-79e58faad89b_iso";
    this.timers.erase(e);
    e.callback(e.params);
   }.bind(this), c / this.multiplier);
   e.timer = b;
  }
  this.timers.push(e);
 },
 stopAll: function (a) {
  "iso_96fe213f-f55f-4fa8-9a5e-552e751ecade_iso";
  for (var b = 0; b < this.timers.length; b++) {
   var c = this.timers[b];
   if (c.object == a) {
    clearTimeout(c.timer);
    this.timers.erase(c);
    b--;
   }
  }
 },
 pause: function () {
  "iso_113ebe2b-f3eb-42a5-af6a-7d2c667b1f71_iso";
  if (this.paused) {
   return this;
  }
  this.paused = true;
  var a = new Date().getTime();
  this.timers.each(function (b) {
   "iso_432fc727-1a04-41b3-850d-5f225a5464db_iso";
   clearTimeout(b.timer);
  });
  this.timers.each(function (d, c) {
   "iso_593f94df-28e3-4118-8fc7-2dac92430225_iso";
   var b = d.duration - (a - d.start) * this.multiplier;
   if (b <= 0) {
    b = 1;
   }
   this.timers[c].duration = b;
  }.bind(this));
  return this;
 },
 resume: function () {
  "iso_24aff1ff-7ed4-4a2b-8857-e2cc32b61c34_iso";
  if (!this.paused) {
   return this;
  }
  var a = this.timers;
  this.timers = [];
  this.paused = false;
  a.each(function (b) {
   "iso_61c9b841-4957-4e41-9a01-255270b3caaa_iso";
   this.start(b.object, b.callback, b.duration, b.params);
  }.bind(this));
  return this;
 },
 setMultiplier: function (a) {
  "iso_aed96321-e65d-49d5-98bc-a3e9a75b9d73_iso";
  if (this.paused) {
   this.multiplier = a;
   return this;
  }
  this.pause();
  this.multiplier = a;
  this.resume();
  return this;
 }
});
var GameRound = new Class({
 Implements: [Events],
 g: null,
 run: null,
 type: "normal",
 creeps: 0,
 allCreeps: [],
 showMoveModulus: 1,
 initialize: function (a) {
  "iso_45f384eb-4445-4b9e-9a55-a1ecc8760b01_iso";
  this.run = function () {
   "iso_920419d8-87cf-4ba2-979d-0694c78eaa74_iso";
   a.bind(this)();
   this.showMoveModulus = Math.min(3, Math.max(1, Math.ceil((this.creeps -
    20) / 30)));
  }.bind(this);
 },
 addCreep: function (a, c, b) {
  "iso_28581694-60f5-4537-9a62-d491004d9a5f_iso";
  this.creeps++;
  this.g.timer.start(this, function () {
   "iso_34e52df3-2c92-4af2-99aa-3953577dd478_iso";
   var d = a.addCreep(c);
   d.addEvent("killed", this.removeCreep.bind(this));
   d.showMoveModulus = this.showMoveModulus;
   d.show().move();
  }.bind(this), b);
 },
 removeCreep: function () {
  "iso_b125a66a-84ed-4dbf-88f8-5fb067e55389_iso";
  this.creeps--;
  if (this.creeps <= 0) {
   this.g.timer.stopAll(this);
   if (this.g.lives > 0) {
    this.fireEvent("roundOver");
   }
  }
 }
});
var GameRoundRoute = new Class({
 Extends: GameRound,
 type: "auto",
 completionMoney: 0,
 routeBuilder: null,
 initialize: function (a) {
  "iso_ce6bf2e6-83c6-4d7c-8246-23e479307d12_iso";
  this.routeBuilder = a;
 },
 run: function () {
  "iso_265669d4-cfee-499d-843c-70d07cf53d44_iso";
  this.g.addRoute(this.routeBuilder.getNextRoute());
  this.fireEvent("roundOver");
 }
});
var Rounds = new Class({
 roundNumModifier: 0,
 routeBuilder: null,
 creepTypes: [CreepAlpha, CreepBravo, CreepCharlie, CreepDelta, CreepEcho],
 initialize: function (a) {
  "iso_3b1f0a6e-af15-426e-9684-0ca45a4f1d62_iso";
  this.routeBuilder = a;
 },
 get: function (roundNum) {
  "iso_787d13a8-c5ea-450c-a4d4-d85755a96ff6_iso";
  switch (roundNum) {
  case 0:
   return new GameRoundRoute(this.routeBuilder);
  case 11:
   this.roundNumModifier++;
   return new GameRoundRoute(this.routeBuilder);
  case 22:
   this.roundNumModifier++;
   return new GameRoundRoute(this.routeBuilder);
  case 33:
   this.roundNumModifier++;
   return new GameRoundRoute(this.routeBuilder);
  }
  roundNum -= this.roundNumModifier;
  var roundData = this.getRoundData(roundNum);
  if (roundData) {
   return new GameRound(function () {
    "iso_de6c8422-2dfe-45bf-bc71-efab22a6f82d_iso";
    this.g.ui.updateRound(roundNum);
    Object.each(roundData, function (timerData, creepType) {
     "iso_ee383ac6-e8bd-4809-b3f0-0d827f30395e_iso";
     creepType = eval("Creep" + creepType);
     var times = this.g.rounds.parseTimer(timerData);
     times.each(function (time) {
      "iso_1a48ee9e-d575-4149-aa6f-ac7cc6c392fb_iso";
      for (var routeIndex = 0; routeIndex < this.g.routes.length; routeIndex++) {
       this.addCreep(this.g.routes[routeIndex], creepType, 500 * time);
      }
     }.bind(this));
    }.bind(this));
   });
  }
  return new GameRound(function () {
   "iso_a908e83e-8962-4c7b-9c7f-ebc284f780e8_iso";
   this.g.ui.updateRound(roundNum + 1);
   var timerCount = [0, 0, 0, 0];
   for (var creepType = 1; creepType <= this.g.rounds.creepTypes.length; creepType++) {
    if (roundNum < 5 * (creepType - 1)) {
     continue;
    }
    var creeps = Math.max(0, Math.round(30 * Math.sin(Math.PI * (roundNum +
     5 - 2 * this.g.rounds.roundNumModifier) / 40 - Math.PI * (
     creepType - 1) / 5) / this.g.rounds.roundNumModifier), 0);
    for (var routeIndex = 0; routeIndex < this.g.routes.length; routeIndex++) {
     for (var i = 0; i < creeps; i++) {
      this.addCreep(this.g.routes[routeIndex], this.g.rounds.creepTypes[
       creepType - 1], 500 * ++timerCount[routeIndex]);
     }
    }
   }
  });
 },
 getRoundData: function (a) {
  "iso_d6371d41-43c9-420b-a3a8-19afa6a2702b_iso";
  switch (a) {
  case 1:
   return {
    Alpha: "5@3"
   };
  case 2:
   return {
    Alpha: "10@3"
   };
  case 3:
   return {
    Alpha: "20@3"
   };
  case 4:
   return {
    Alpha: "10@2"
   };
  case 5:
   return {
    Alpha: "20@2"
   };
  case 6:
   return {
    Alpha: "30@1"
   };
  case 7:
   return {
    Alpha: "10@2",
    Bravo: "2@4+22"
   };
  case 8:
   return {
    Alpha: "20@2",
    Bravo: "5@3+22"
   };
  case 9:
   return {
    Alpha: "20@2",
    Bravo: "10@3+22"
   };
  case 10:
   return {
    Alpha: "20@1",
    Bravo: "15@2+20"
   };
  case 11:
   return {
    Alpha: "30@2"
   };
  case 12:
   return {
    Alpha: "10@2",
    Bravo: "15@3+20"
   };
  case 13:
   return {
    Alpha: "10@1",
    Bravo: "20@3+5"
   };
  case 14:
   return {
    Bravo: "10@2",
    Charlie: "4@4+15"
   };
  case 15:
   return {
    Bravo: "20@2",
    Charlie: "6@4+15"
   };
  case 16:
   return {
    Bravo: "10@1",
    Charlie: "10@3+10"
   };
  case 17:
   return {
    Bravo: "10@1",
    Charlie: "20@3"
   };
  case 18:
   return {
    Charlie: "30@2"
   };
  case 19:
   return {
    Bravo: "10@1",
    Charlie: "20@1+5"
   };
  case 20:
   return {
    Alpha: "20@1",
    Bravo: "20@1+20",
    Charlie: "20@1+40"
   };
  case 21:
   return {
    Delta: "10@3"
   };
  case 22:
   return {
    Charlie: "10@2",
    Delta: "10@2+20"
   };
  case 23:
   return {
    Delta: "20@2"
   };
  case 24:
   return {
    Charlie: "15@2",
    Delta: "20@2+10"
   };
  case 25:
   return {
    Delta: "15@1"
   };
  case 26:
   return {
    Bravo: "10@1",
    Charlie: "10@1+10",
    Delta: "10@1+20"
   };
  case 27:
   return {
    Delta: "20@2",
    Echo: "5@4+40"
   };
  case 28:
   return {
    Delta: "10@2",
    Echo: "10@3+40"
   };
  case 29:
   return {
    Echo: "15@2"
   };
  case 30:
   return {
    Alpha: "5@1",
    Bravo: "5@1+5",
    Charlie: "10@1+10",
    Delta: "5@1+20",
    Echo: "5@2+30"
   };
  case 31:
   return {
    Foxtrot: "5@4"
   };
  case 32:
   return {
    Foxtrot: "10@4"
   };
  case 33:
   return {
    Foxtrot: "10@2"
   };
  case 34:
   return {
    Foxtrot: "20@3",
    Golf: "2@6+60"
   };
  case 35:
   return {
    Foxtrot: "20@2",
    Golf: "5@4+30"
   };
  case 36:
   return {
    Foxtrot: "10@2",
    Golf: "10@4+20"
   };
  case 37:
   return {
    Golf: "20@3"
   };
  case 38:
   return {
    Foxtrot: "10@2",
    Golf: "20@4+20"
   };
  case 39:
   return {
    Echo: "10@1",
    Foxtrot: "10@2+10",
    Golf: "10@2+30"
   };
  case 40:
   return {
    Echo: "10@1",
    Foxtrot: "20@1+20",
    Golf: "10@2+50",
    Hotel: "1@1 2@10+70"
   };
  case 41:
   return {
    Golf: "10@2",
    Hotel: "3@8+20"
   };
  case 42:
   return {
    Golf: "20@2",
    Hotel: "5@7+30"
   };
  case 43:
   return {
    Golf: "20@2",
    Hotel: "5@5+30"
   };
  case 44:
   return {
    Foxtrot: "20@1",
    Golf: "10@2+20",
    Hotel: "8@5+35"
   };
  case 45:
   return {
    Alpha: "5@1 5@1+30",
    Bravo: "5@1 5@1+30",
    Charlie: "5@1 5@1+30",
    Delta: "5@1 5@1+30",
    Echo: "5@1 5@1+30",
    Foxtrot: "5@1 5@1+30"
   };
  case 46:
   return {
    Hotel: "20@5"
   };
  case 47:
   return {
    Golf: "10@2",
    Hotel: "10@3+20"
   };
  case 48:
   return {
    Golf: "10@1",
    Hotel: "15@4+10"
   };
  case 49:
   return {
    Foxtrot: "20@1",
    Golf: "10@2+20",
    Hotel: "20@4+35"
   };
  case 50:
   return {
    Alpha: "5@1 5@1+90",
    Bravo: "5@1 5@1+90",
    Charlie: "5@1 5@1+90",
    Delta: "5@1 5@1+90",
    Echo: "5@1 5@1+90",
    Foxtrot: "5@1 5@1+90",
    Golf: "10@1+5 5@1+90",
    Hotel: "20@3+15 2@3+90",
    India: "2@15+75"
   };
  default:
   return {
    Alpha: this._calc(a, 1),
    Bravo: this._calc(a, 2),
    Charlie: this._calc(a, 3),
    Delta: this._calc(a, 4),
    Echo: this._calc(a, 5),
    Foxtrot: this._calc(a, 6),
    Golf: this._calc(a, 7),
    Hotel: this._calc(a, 8),
    India: this._calc(a, 9)
   };
  }
  return false;
 },
 _calc: function (b, a) {
  "iso_334b6380-1646-4452-9dff-cd354b4ad2b1_iso";
  return Math.round((Math.sin((b - a) % 10 * 6 / a) + 1) * (b / Math.pow(a +
   1, 1.7)) + (1.3 ^ b / (13 - a % 10) / 10)) + "@2";
 },
 parseTimer: function (a) {
  "iso_3c5ae2c4-b326-4b68-84f6-0d784a454701_iso";
  var c = [];
  if (!a) {
   return c;
  }
  var b = a.match(/([0-9]+@[0-9]+(\+[0-9]+)?)/g);
  b.each(function (e) {
   "iso_c03144bb-b418-4b5e-bcf5-482f883ee94d_iso";
   var g = e.match(/([0-9]+)@([0-9]+)(\+([0-9]+))?/);
   for (var f = 0; f < g[1]; f++) {
    var d = 0;
    if (g[4]) {
     d = parseInt(g[4]);
    }
    c.push(f * g[2] + d);
   }
  });
  return c;
 }
});
window.addEvent("load", function () {
 "iso_b927da0b-ffb0-495b-8537-2cb704beb87e_iso";
 var a = new Game($("game"));
 a.gameClass = Game;
 Game = null;
});
! function (e, a, f) {
 "iso_b13b080d-2e5b-4c03-a937-a3921971a5bc_iso";
 var c, b = e.getElementsByTagName(a)[0];
 if (e.getElementById(f)) {
  return;
 }
 c = e.createElement(a);
 c.id = f;
 c.src = "//connect.facebook.net/en_GB/all.js#xfbml=1&appId=267555096654594";
 b.parentNode.insertBefore(c, b);
}(document, "script", "facebook-jssdk");
window.___gcfg = {
 lang: "en-GB"
};
var twitter = function (e, a, f) {
 "iso_d49a26ba-6135-431a-8aa8-96761dcdc554_iso";
 var c, b = e.getElementsByTagName(a)[0];
 if (!e.getElementById(f)) {
  c = e.createElement(a);
  c.id = f;
  c.src = "//platform.twitter.com/widgets.js";
  b.parentNode.insertBefore(c, b);
 }
};
twitter(document, "script", "twitter-wjs");
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-29746608-1"]);
_gaq.push(["_trackPageview"]);
! function () {
 "iso_baee0144-9246-4cd8-ad9f-47e4dd9a879c_iso";
 var b = document.createElement("script");
 b.type = "text/javascript";
 b.async = true;
 b.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") +
  ".google-analytics.com/ga.js";
 var a = document.getElementsByTagName("script")[0];
 a.parentNode.insertBefore(b, a);
}();


source after instrument: { map: [Function], toString: [Function] }
Instrument Start:  https://www.mapstd.com/js/mapstd-1.2.0.js
Instrument Finish:   https://www.mapstd.com/js/mapstd-1.2.0.js
